<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<title>Página normal sem título</title>
</head>

<body bgcolor="#FFFFFF">
<script name="JavaScript">

jogo = 1;
player1=0;
player2=0;
acertosP1=0;
acertosP2=0;
var verb = new makeArray2 (5,5);

   verb[0][0] = "see";
   verb[0][1] = "drink";
   verb[0][2] = "say";
   verb[0][3] = "tell";
   verb[0][4] = "speak";
   verb[1][0] = "go";
   verb[1][1] = "do";
   verb[1][2] = "sell"; 
   verb[1][3] = "swim" ;
   verb[1][4] = "begin" ;
   verb[2][0] = "break" ;
   verb[2][1] = "bring"
   verb[2][2] = "know"
   verb[2][3] = "have"
   verb[2][4] = "eat"
   verb[3][0] = "forget" 
   verb[3][1] = "give"
   verb[3][2] = "come"
   verb[3][3] = "let"
   verb[3][4] = "make"
   verb[4][0] = "pay"
   verb[4][1] = "put"
   verb[4][2] = "read"
   verb[4][3] = "send"
   verb[4][4] = "sit"

var Solution = new makeArray2 (5,5);

   Solution[0][0] = "saw"
   Solution[0][1] = "drank"
   Solution[0][2] = "said"
   Solution[0][3] = "told"
   Solution[0][4] = "spoke"
   Solution[1][0] = "went"
   Solution[1][1] = "did"
   Solution[1][2] = "sold"
   Solution[1][3] = "swam"
   Solution[1][4] = "began"
   Solution[2][0] = "broke"
   Solution[2][1] = "brought"
   Solution[2][2] = "knew"
   Solution[2][3] = "had"
   Solution[2][4] = "ate"
   Solution[3][0] = "forgot"
   Solution[3][1] = "gave"
   Solution[3][2] = "came"
   Solution[3][3] = "let"
   Solution[3][4] = "made"
   Solution[4][0] = "paid"
   Solution[4][1] = "put"
   Solution[4][2] = "read"
   Solution[4][3] = "sent"
   Solution[4][4] = "sit"

var correctP1 = new makeArray2 (4,2);
var correctP2 = new makeArray2 (4,2);

var empty = new makeArray2 (5,5);

    empty[0][0] = -1
    empty[0][1] = -1
    empty[0][2] = -1
    empty[0][3] = -1
    empty[0][4] = -1
    empty[1][0] = -1
    empty[1][1] = -1
    empty[1][2] = -1
    empty[1][3] = -1
    empty[1][4] = -1
    empty[2][0] = -1
    empty[2][1] = -1
    empty[2][2] = -1
    empty[2][3] = -1
    empty[2][4] = -1
    empty[3][0] = -1
    empty[3][1] = -1
    empty[3][2] = -1
    empty[3][3] = -1
    empty[3][4] = -1
    empty[4][0] = -1
    empty[4][1] = -1
    empty[4][2] = -1
    empty[4][3] = -1
    empty[4][4] = -1

function variables(){
  	
	    t = 1;
       change = 1;    
   
//name1 = prompt("Please write the first player's name ","");  
//name2 = prompt("Please write the second player's name ","");  

//    whogoesnow = "Turn:" + name1
}

function makeArray2 (x,y)
{
        var count;
        this.length=x;
        for (var count=0; count<=(x-1); count++)
                this[count]=makeArray(y);
}
function makeArray (numElementos)
{
        var count;
        var arranjo = new Array (numElementos) ;
        for (count = 0; count <= (numElementos-1); count++)
        {
        arranjo[count]=0;
        }
        return(arranjo);
       
}        

function updateScore(file,pl1,pl2)
{
	file.player1.value= pl1;
	file.player2.value= pl2;
}
function reset()
{
	for ( i=0; i<=8; i++)
	{
	empty[i]= -1;
	}
}
function blocked(k)
{
        var ret = false;
        correctP = eval ("correctP" + k);
        for (x=0; x<=2; x++)
        {
            if ((correctP[x][0]==0)||(correctP[x][0]==4)||(correctP[x][1]==0)||(correctP[x][1]==4))
                  {
                  if (correctP[x][0]==0)
                      {
                      if (correctP[x][1]==0)
                          {
                          if ((empty[correctP[x][0]][correctP[x][1]+1]== -1)||
                          (empty[correctP[x][0]+1][correctP[x][1]]== -1))
                              {
                              ret = true;
                              }
                              else
                              {
                              ret = false;
                              }
                          }
                      if (correctP[x][1]==4)
                          {
                          if ((empty[correctP[x][0]][correctP[x][1]-1]== -1)||
                             (empty[correctP[x][0]+1][correctP[x][1]]== -1))
                             {
                             ret = true;
                             }
                             else
                             {
                             ret = false;
                             }
                          }
                      if ((correctP[x][1]>0)&&(correctP[x][1]<0))
                         {
                         if ((empty[correctP[x][0]][correctP[x][1]-1]== -1)||
                             (empty[correctP[x][0]][correctP[x][1]+1]== -1)||
                             (empty[correctP[x][0]+1][correctP[x][1]]== -1))
                             {
                             ret = true;
                             }
                             else
                             {
                             ret = false;
                             }
                         }
                     }
                  if (correctP[x][0]==4)
                     {
                     if (correctP[x][1]==0)
                        {
                        alert (" estou aqui");
                        if ((empty[correctP[x][0]][correctP[x][1]+1]== -1)||
                            (empty[correctP[x][0]-1][correctP[x][1]]== -1))
                            { 
                            alert (" o resultado eh  tem saida" ); 
                            ret = true;
                            }
                            else
                            {
                            alert (" o resultado eh  nao tem saida"); 
                            ret = false;
                            }
                        }
                     if (correctP[x][1]==4)
                        {
                        if ((empty[correctP[x][0]][correctP[x][1]-1]== -1)||
                            (empty[correctP[x][0]-1][correctP[x][1]]== -1))
                            {
                            ret = true;
                            }
                            else
                            {
                            ret = false;
                            }
                        }
                     if ((correctP[x][1]>0)&&(correctP[x][1]<0))
                         {
                         if ((empty[correctP[x][0]][correctP[x][1]-1]== -1)||
                             (empty[correctP[x][0]][correctP[x][1]+1]== -1)||
                             (empty[correctP[x][0]-1][correctP[x][1]]== -1))
                             {
                             ret = true;
                             }
                             else
                             {
                             ret = false;
                             }
                         }
                      }
                if ((correctP[x][1]==0)&&((correctP[x][0] > 0)&&(correctP[x][0]<4)))
                    {
                    if ((empty[correctP[x][0]-1][correctP[x][1]]== -1)||
                        (empty[correctP[x][0]+1][correctP[x][1]]== -1)||
                        (empty[correctP[x][0]][correctP[x][1]+1]== -1))
                        {
                        ret = true;
                        }
                        else
                        {
                        ret = false;
                        }
                    }

             
                if ((correctP[x][1]==4)&&((correctP[x][0] > 0)&&(correctP[x][0]<4)))
                    {
                    if ((empty[correctP[x][0]-1][correctP[x][1]]== -1)||
                        (empty[correctP[x][0]+1][correctP[x][1]]== -1)||
                        (empty[correctP[x][0]][correctP[x][1]-1]== -1))
                        {
                        ret = true;
                        }
                        else
                        {
                        ret = false;
                        }
                    }
          }
        else
          {
           if ((empty[correctP[x][0]][correctP[x][1]-1]== -1)||
              (empty[correctP[x][0]][correctP[x][1]+1]== -1)||
              (empty[correctP[x][0]-1][correctP[x][1]]== -1)||
              (empty[correctP[x][1]+1][correctP[x][1]]== -1))
              {
              ret = true;
              } 
            else
              {
              ret = false;
              }
          }
      if (ret == true)
         {return(ret);}
      alert(' este eh o valor de ret' + ret + '' + x);
      
      }
     alert(' estou retornando' + ret);
     return(ret);
 }
function blocked2()
{
        for (x=0; x<=2; x++)
        {
        
        if ((empty[correctP2[x][0]][correctP2[x][1]-1]== -1)||
           (empty[correctP2[x][0]][correctP2[x][1]+1]== -1)||
           (empty[correctP2[x][1]][correctP2[x][0]-1]== -1)||
           (empty[correctP2[x][1]][correctP2[x][0]+1]== -1))
           {
           return true;
           }
        else
           {
           return false;
           }
        }
}

function clearRecord1()
{
        acertosP1 = 0;
}
function clearRecord2()
{
        acertosP2 = 0;
}

function turnchange(file,t,k)
{
   
   
        if (t == 0)
          {
          t = 1;
          whogoesnow = name1 + " is playing now";
             if (acertosP1==0)
               {
               return (t);
               }

            if (blocked(t) == false )
              {
              alert (" No way out for this fucker "+ name1);
              z=0;
              for (x=0 ; x<= 4; x++)
                {
                for (y=0 ;y <=4; y++)
                   {
                      if ( empty [x][y]== 1)
                        {
                        but = eval("file.b" + z);
                        but.value = "blocked";
                        empty[x][y]=-2;
                        }
                        z++;
                   }
                 }
               clearRecord1();
               return(t);
               }
             else
               {
               return(t);
               }
          }
        else
          {
           t = 0;
           whogoesnow = name2 + " is playing now"
             if (acertosP2==0)
               {
               return (t);
               }
          k = t+2;
          alert (" o valor de k eh " + k);
          if (blocked(k) == false )
            {
            alert (" No way out for this fucker "+ name2);
            z=0;
            for (x=0 ; x<= 4; x++)
               {
               
               for (y=0 ;y <=4; y++)
                   {
                      if ( empty [x][y]== 0)
                      {
                      but = eval("file.b" + z);
                      but.value = "blocked";
                      empty[x][y]=-2;
                      }
                      z++;
                      
                   }
               }
             clearRecord2();
             return(t);
             }
           else
             {
             return(t);
             }
           }
      }
  

function gameOver(file)
{
          if (player1 > player2)
              {
              alert (" Game Over !" + name1 + " is the winner"); 
              updateScore(file,"","");
              history.go(0);
              return;
              }
	  if (player1 < player2)
	      {
              alert (" Game Over !" +  name2 + " is the winner");
              updateScore(file,"","");
              history.go(0);
              return;
	      }
	  alert (" This is the end! No winner");
          updateScore(file,"","");
          history.go(0);
	
}
function nextGame(file,jog)
{
  if ((file.b0.value == "          ")&&(jog != 1 ) )
       {
       alert("You have to START the game first");
       jogo = 1;
       return;
       }

  if (jog < 1)
      {
	alert (" This is the first game ");
        jogo = 1;
        return;
      }
  if (jog > 3)
  {
   gameOver(file);
   return;
  }
  j= 0;
  for ( i = (9*(jog-1)); i<=((9*jog)-1); i++)
  
  {
        but = eval("file.b" + j)
        but.value = verb[i];
        j++;
  }
  reset();
}
function change_bx(file,i,j,k)
{
  but = eval("file.b" + k)
  but.value = verb[i][j]
 }
function changeAll(file)
{
rdn = Math.random();
name1 = prompt("Please write the first player's name ","");  
name2 = prompt("Please write the second player's name ","");  

     k = 0;
     for (i = 0; i <= 4; i++)
     {
         for (j =0; j <= 4; j++)
         {
         but = eval("file.b" + k);
         but.value = verb[i][j];
         empty[i][j]=-1;
         k++;
         }
     }
if (rdn >= .5)
   {file.whoseturn.value=name1}
   else{file.whoseturn.value=name2}
}

function adjacentP1(i,j,k)
{
    if ((empty[i][j]==0)||(empty[i][j]==1))
        {
        alert (" invalid position" );
        return false;
        }
    for (x=0 ;x<=2; x++)
    {
    if  ((correctP1[x][0]== i)&&((correctP1[x][1]==(j-1))||(correctP1[x][1]==(j+1))))
        {
         return true;
        }
    if  ((correctP1[x][1]== j)&&((correctP1[x][0]==(i-1))||(correctP1[x][0]==(i+1))))
        {
         return true;
        }
    }
alert ( "It's not an adjacent position");
return false;
}
function adjacentP2(i,j,k)
{
    if ((empty[i][j]==0)||(empty[i][j]==1))
        {
        alert (" invalid position" );
        return false;
        }
    for (x=0 ;x<=2; x++)
    {
    if  ((correctP2[x][0]== i)&&((correctP2[x][1]==(j-1))||(correctP2[x][1]==(j+1))))
        {
         return true;
        }
    if  ((correctP2[x][1]== j)&&((correctP2[x][0]==(i-1))||(correctP2[x][0]==(i+1))))
        {
         return true;
        }
    }
alert ( "It's not an adjacent position");
return false;
}

function change_b(file,i,j,k)
{
    but = eval("file.b" + k)
    if (but.value == "          ")
       {
       alert("You have to START the game first")
       return;
       }
    ans = file.answer.value;
    if (ans == "")
	{
        alert ( "Write the answer in the box first. Then click on the correspomding button.");
	return;
	}
    if (t == 1)
        {
          if (acertosP1 == 0)  
            {
            if (ans.toLowerCase() == Solution[i][j]) 
                {
                  empty[i][j] = "1";
                  xo= "  X  ";
                  correctP1[acertosP1][0]= i;
                  correctP1[acertosP1][1]= j;
                  acertosP1++;
                  but.value = xo;
                  file.answer.value = "";
              //  alert (name1 + " choose an adjacent option");
                  return;
                }
            else 
                {
                alert (" Incorrect answer " );
                t = turnchange(file,t,k) ;
                file.whoseturn.value = whogoesnow        
                file.answer.value = "";
                return;
                }
             }
          else
            {
             if (adjacentP1(i,j,k)== true)
              {
              if ((ans.toLowerCase() == Solution[i][j]) && (acertosP1 < 4))
                 {
                  empty[i][j] = 1;
                  xo= "  X  ";
                  correctP1[acertosP1][0]= i;
                  correctP1[acertosP1][1]= j;
                  acertosP1++;
                  file.answer.value = "";
                  but.value= xo;
                  if (acertosP1==4)
                    {
                    z=0;
                     for (x=0 ; x<= 4; x++)
                      {
                        for (y=0 ;y <=4; y++)
                          {
                           if ( empty [x][y]== 1)
                             {
                             but = eval("file.b" + z);
                             but.value = name1;
                             empty[x][y]="x";
                             }
                             z++;
                          }
                      }
                    clearRecord1();
                    t = turnchange(file,t,k) ;
                    updateScore(file,++player1,player2);
                    file.whoseturn.value = whogoesnow        
                    }
                

            //    alert (name1 + " choose an adjacent option");
                  return;
                 }
              else
                 {
                 alert (" Incorrect answer " );
                 t = turnchange(file,t,k) ;
                 file.whoseturn.value = whogoesnow        
                 file.answer.value = "";
                 return;
                 }
              }
             else
              {
              alert (" Choose an adjacent position" )
              }
             }




       //  win(file);
         return;
         }
         else
          {
          if (acertosP2 == 0)  
            {
            if ((ans.toLowerCase() == Solution[i][j]) && (acertosP2 < 4))
                {
                  empty[i][j] =0;
                  xo= "  0  ";
                  correctP2[acertosP2][0]= i;
                  correctP2[acertosP2][1]= j;
                  acertosP2++;
                  file.answer.value = ""
                  but.value= xo;
            //    alert (name2 + " choose an adjacent option");
                  return;
                }
            else 
                {
                alert (" Incorrect answer " );
                t = turnchange(file,t,k) ;
                file.whoseturn.value = whogoesnow        
                file.answer.value = "";
                return;
                }
             }
          else
            {
             if (adjacentP2(i,j,k)== true)
              {
              if ((ans.toLowerCase() == Solution[i][j]) && (acertosP2 < 4))
                {
                  empty[i][j] = 0;
                  xo= "  0  ";
                  correctP2[acertosP2][0]= i;
                  correctP2[acertosP2][1]= j;
                  acertosP2++;
                  but.value= xo;
                  file.answer.value = ""
                  if (acertosP2==4)
                    {
                    z=0;
                     for (x=0 ; x<= 4; x++)
                      {
                        for (y=0 ;y <=4; y++)
                          {
                           if ( empty [x][y]== 0)
                             {
                             but = eval("file.b" + z);
                             but.value = name2;
                             empty [x][y]="O";
                             }
                             z++;
                          }
                      }
                    clearRecord2();
                    t = turnchange(file,t,k) ;
                    updateScore(file,player1,++player2);
                    file.whoseturn.value = whogoesnow;        
                    }

           //     alert (name2 + " choose an adjacent option");
                  return;
                }
              else
                 {
                 alert (" Incorrect answer " );
                 t = turnchange(file,t,k) ;
                 file.whoseturn.value = whogoesnow        
                 file.answer.value = "";
                 return;
                 }
              }
             else
              {
              alert (" Choose an adjacent position" )
              }
             }



       //  win(file);
         return;
         }

}

</script><script name="JavaScript">

variables();


</script>
<center>
<form name="tictac">
    <br>
    Player1: <input type="text" name="player1" size= 5>
    <br>
    Player2: <input type="text" name="player2" size =5>
    <br>
    </p>
    <table border="1" cellspacing="7" cellpadding="7" style="border-collapse: collapse" bordercolor="#111111">
        <tr>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b0" value="          "
            onclick="change_b(tictac,0,0,0)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b1" value="          "
            onclick="change_b(this.form,0,1,1)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b2" value="          "
            onclick="change_b(this.form,0,2,2)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b3" value="          "
            onclick="change_b(this.form,0,3,3)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b4" value="          "
            onclick="change_b(this.form,0,4,4)"> </td>
        </tr>
        <tr>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b5" value="          "
            onclick="change_b(tictac,1,0,5)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b6" value="          "
            onclick="change_b(this.form,1,1,6)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b7" value="          "
            onclick="change_b(this.form,1,2,7)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b8" value="          "
            onclick="change_b(this.form,1,3,8)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b9" value="          "
            onclick="change_b(this.form,1,4,9)"> </td>
        </tr>
        <tr>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b10" value="          "
            onclick="change_b(tictac,2,0,10)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b11" value="          "
            onclick="change_b(this.form,2,1,11)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b12" value="          "
            onclick="change_b(this.form,2,2,12)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b13" value="          "
            onclick="change_b(this.form,2,3,13)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b14" value="          "
            onclick="change_b(this.form,2,4,14)"> </td>
        </tr>
        <tr>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b15" value="          "
            onclick="change_b(tictac,3,0,15)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b16" value="          "
            onclick="change_b(this.form,3,1,16)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b17" value="          "
            onclick="change_b(this.form,3,2,17)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b18" value="          "
            onclick="change_b(this.form,3,3,18)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b19" value="          "
            onclick="change_b(this.form,3,4,19)"> </td>
        </tr>
        <tr>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b20" value="          "
            onclick="change_b(tictac,4,0,20)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b21" value="          "
            onclick="change_b(this.form,4,1,21)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b22" value="          "
            onclick="change_b(this.form,4,2,22)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b23" value="          "
            onclick="change_b(this.form,4,3,23)"> </td>
            <td align="center" bgcolor="#C8D5D5"><input type="button" name="b24" value="          "
            onclick="change_b(this.form,4,4,24)"> </td>
        </tr>

    </table>
    <p><br>
    Write in the box below the simple past form of one of the verbs and click on the corresponding button
    <br>
    <p><input type="button" name="whoseturn"  value= " Press Start "> <br>
    <input type="text" name="answer" value="" size = 10>
    </p>
<input type="button" name="start" value=" start "
 onclick="changeAll(this.form)">
    <br>
<input type="button" name="back" value=" back "
 onclick="nextGame(this.form,--jogo)">
<input type="button" name="next" value=" next "
 onclick="nextGame(this.form,++jogo)">
    <br>
</form>
</body>
</html>